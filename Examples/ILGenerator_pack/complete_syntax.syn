bTy		->	keyword && "int";
bTy		->	keyword && "float";
bTy		->	keyword && "char";
bTy		->	keyword	&& "bool";
record	->	keyword && "struct";
record	->	keyword && "class";

str		->	raw_string;
num		->	number;
id		->	identifier;
cTy		->	custom_type;
rel		->	rel_op;
bl		->	keyword && "true";
bl		->	keyword	&& "false";
$$
_Global:
Prgm_	->	Prgm;
Prgm	->	Stmts;
Prgm	->	epsilon;

Stmts	->	Stmts Stmt;
Stmts	->	Stmt;
Blck	->	"{" Stmts "}";

Stmt	->	Open;
Stmt	->	Cls;
Open	->	IfHead Stmt;
Open	->	IfHead Cls "else" Open;

Cls		->	Stc;
Cls		->	Blck;
Cls		->	IfHead Cls "else" Cls;
IfHead	->	"if" "(" BExpr ")";
BExpr	->	_Assignment.Expr;


Stc		-> 	_Definition.Stc;
Stc		->	_Assignment.Asgn;


_Definition:
Stc		->	M0 VarDef;							
M0		->	epsilon;							{begin_def};// top = var_table;	
VarDef	-> 	Def;							

Stc		->	M1 TyDef;						
M1		->	epsilon;							{begin_typedef};// top = type_head
TyDef	->	TyHead "{" Defs"}" ";";			{end_typedef};// pop table;get ILEntry from TyHead;TyHead.width = offset;
TyHead	->	Record Id;						{set_typeHead};// new ILEntry;set type(struct/class/...);set Token(cTyname); AddEntry;
Defs	->	Defs Def;						{building_defs};
Defs	->	Def;							{begin_defs};
Def 	->	Ty Id ";";						{set_as_def};// get ILEntry from Ty;Get Token from Id; Ty.token = Id.token; AddEntry;
Def		->	Ty Id "=" ImVal ";";				{set_def_with_val};// get ILEntry from Ty;Get Token from Id(1); Ty.token = Id(1).token; Ty.val = Id(2).token.name; AddEntry;

Ty		->	CTy;							{passon_0};
Ty		->	BTy Arr;						{complete_arrayType};// get ILEntry from Ty;set array_info;set entry.width = width * array_info;
Ty		->	CTy Arr;						{complete_arrayType};
Ty		->  BTy;								{passon_0};
Arr		->  Arr Cmp;							{building_array};// array_info.push_back(stoi(Cmp.Token.name));
Arr		->	Cmp;							{begin_array};// pass array_info.push_back(stoi(Cmp.Token.name));

Cmp		->	"[" Num "]";						{passon_1};// PassOn Token;
CTy		->	cTy;								{set_customeType};// search in type_head;copy;new ILEntry;set type;set width;
BTy		->	bTy;								{set_baseType}; // new ILEntry;set type;set width;
Record  ->	record;							{get_token};// Get Token;return Token;
Id		->	id;								{get_token};

ImVal	->	Str;							{passon_0};
ImVal	->	Num;							{passon_0};
Str		->	str;								{get_token};
Num		->	num;								{get_token};


_Assignment:
Asgn	->	LVal "=" Expr ";";				{assign};

Expr	->	BTpl "||" BTpl;
Expr	->	BTpl;							{passon_0};
BTpl	->	BFn "&&" BFn;
BTpl	->	BFn;							{passon_0};
BFn		->	"!" BFn;
BFn		->	"(" BExpr ")";					{passon_1};
BFn		->	RVal;							{passon_0};
RVal	->	RVal "+" Tpl;					{do_add};
RVal	->	RVal "-" Tpl;					{do_sub};
RVal	->	Tpl;							{passon_0};
Tpl		->	Tpl "*" Fn;						{do_mul};
Tpl		->	Tpl "/" Fn;						{do_div};
Tpl		->	Fn;								{passon_0};
Fn		->	"(" RVal ")";					{passon_1};
Fn		->	"-" Val;							{do_negate};// new Temp Entry
Fn		->	 Val;							{passon_0};

Val		->	LVal;							{passon_0};
Val		->	ImVal;							{create_addr};

// struct
LVal	-> 	M0 LValCmp;						{complete_lVal};//pop the Env.top;
M0		->	epsilon;							{start_lVal};//push Env.top;set Env.top as var_head;
LValCmp	->	LValCmp "." LValMem;				{filling_addr};//connect LValMem<Address>.chain[0] to LValCmp<Address>.chain;
LValCmp	->	LValMem;						{start_Cmp};// set LValMem<Address>.lastEntry.tableptr to Env.top; return LValMem<Address>;
// baseType
LValMem	->	MemId;							{create_id_addr};//check MemId<Token>.name in table;create addr;return addr
MemId	->	Id;								{passon_0};//passon_0

// arrayType
LValMem	->	ArrVar;							{passon_0};

ArrVar	->	ArrId Arr;						{complete_array};//ArrId<Address>.array_index.push_back(Arr<Address>);pop Env.top; return AddrId<Address>;
ArrId	->	Id;								{create_array_dimension};//check Id<Token>.name in Env.top;create addr;push Env.top;set entry.tableptr to Env.top; return addr;
Arr		->  Arr Cmp;							{process_offset};//create addr for [t_mul,t_offset], Generator Code: "t_mul = Addr1 * (ArrayInfo[dimension-1])","t_offset = t_mul + Addr2"; return t_offset;
Arr		->	Cmp;							{passon_0};
Cmp		->	"[" RVal "]";					{inc_array_dimension};//return RVal<Address>;

ImVal	->	Str;							{passon_0};
ImVal	->	Num;							{passon_0};
Str		->	str;								{get_token};
Id		->	id;								{get_token};
Num		->	num;								{get_token};



